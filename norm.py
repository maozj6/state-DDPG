import numpy as np


STATE_MIN = np.array([
   -749.3643, -1097.3417, -69.39875, 15.36909103, 0., 0.,
   -1.48287332, -1.39142919, -3.14290667, -3.15909243, 6.73304558, 0.,
   -37.90419769, -11.34649658, -12.2705431, -8.35968781,
   -34.54420853, -26.25236702, -15.21090221, -179.99983215,
   -179.99996948, 40.24637222, -111.64741516, 1387.07495117
])

STATE_MAX = np.array([
    714.9854, 700.2813, -1.001669, 48.877079, 0., 0.,
    1.4823997, 1.36727273, 3.14613485, 3.14158297, 48.7803001, 0.,
    39.5221786, 6.75891161, 14.1700325, 13.4438019,
    58.3890877, 41.686039, 34.8106613, 179.999451,
    179.999985, 40.24637222, -111.64741516, 1387.26904
])

ACTION_MIN = np.array([
    25.0, -10.0331955, -3.14150882, -1.08869064, 0., 0., 0., 0., 0., 0., 0.
])

ACTION_MAX = np.array([
    40.0, 50.20737839, 5.64199209, 1.32560444, 0., 0., 0., 0., 0., 0., 0.
])

def normalize_numpy(state: np.ndarray, action: np.ndarray):
    norm_state = (state - STATE_MIN) / (STATE_MAX - STATE_MIN + 1e-8)
    norm_action = (action - ACTION_MIN) / (ACTION_MAX - ACTION_MIN + 1e-8)
    return norm_state, norm_action

import torch

# 写死 min/max 数组并转成 Tensor
STATE_MIN_T = torch.tensor([
   -749.3643, -1097.3417, -69.39875, 15.36909103, 0., 0.,
   -1.48287332, -1.39142919, -3.14290667, -3.15909243, 6.73304558, 0.,
   -37.90419769, -11.34649658, -12.2705431, -8.35968781,
   -34.54420853, -26.25236702, -15.21090221, -179.99983215,
   -179.99996948, 40.24637222, -111.64741516, 1387.07495117
]).unsqueeze(0)

STATE_MAX_T = torch.tensor([
    714.9854, 700.2813, -1.001669, 48.877079, 0., 0.,
    1.4823997, 1.36727273, 3.14613485, 3.14158297, 48.7803001, 0.,
    39.5221786, 6.75891161, 14.1700325, 13.4438019,
    58.3890877, 41.686039, 34.8106613, 179.999451,
    179.999985, 40.24637222, -111.64741516, 1387.26904
]).unsqueeze(0)

ACTION_MIN_T = torch.tensor([
    25.0, -10.0331955, -3.14150882, -1.08869064, 0., 0., 0., 0., 0., 0., 0.
]).unsqueeze(0)

ACTION_MAX_T = torch.tensor([
    40.0, 50.20737839, 5.64199209, 1.32560444, 0., 0., 0., 0., 0., 0., 0.
]).unsqueeze(0)

def normalize_torch(state: torch.Tensor, action: torch.Tensor):
    norm_state = (state - STATE_MIN_T) / (STATE_MAX_T - STATE_MIN_T + 1e-8)
    norm_action = (action - ACTION_MIN_T) / (ACTION_MAX_T - ACTION_MIN_T + 1e-8)
    return norm_state, norm_action
